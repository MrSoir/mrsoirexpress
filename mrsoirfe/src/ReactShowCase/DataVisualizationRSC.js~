import React, { Component } from 'react';
import Plot3D from '../Plot3D/Plot3D';
import CheckBox from '../CheckBox';
import SlideBar from '../SlideBar';
import './DataVisualizationRSC.css';

//------------------------------------------------------------

function formatDateToStr(date){
	return date.toISOString().split('T')[0];
}
function addDaysToDate(days, date){
	return addSecondsToDate(days * 24*60*60, date);
}
function addHoursToDate(hours, date){
	return addSecondsToDate(hours * 60*60, date);
}
function addMinutesToDate(mins, date){
	return addSecondsToDate(mins * 60, date);
}
function addSecondsToDate(seconds, date){
	let dcpy = new Date(date); // clone - don't touch original date!
	dcpy.setTime(dcpy.getTime()  + seconds * 1000);
	return dcpy;
}
	
//------------------------------------------------------------


class DataVisualizationRSC extends Component{
	constructor(props){
		super(props);
		
		this.onDataVisualizationReady = this.onDataVisualizationReady.bind(this);
//		this.generateRandomDataPoints = this.generateRandomDataPoints.bind(this);
		this.changeCamera = this.changeCamera.bind(this);
		
		this.state = {
			xLabelsCount: 4,
			yLabelsCount: 3,
			dataLabelFontSize: 3,
			axisLabelFontSize: 3.5,
			
			data: [],
			axisLabels: [],
			
			orthographic: false,
			
			dataCount: {
				val: 3,
				min: 1,
				max: 10
			}
		};
	}
   componentDidMount(){
	}
	changeFadingState(){
		this.setState({fading: !this.state.fading});
	}
	//----------------------------
	updateValue(stateObj, val){
		stateObj.val = val;
		this.setState(stateObj);
	}
	updatePercentageValue(prctg, stateObj, floor=false){
		this.updateValue(stateObj, this.evalRangeValue(prctg, stateObj, floor));
	}
	evalRangeValue(prctg, stateObj, floor=false){
		let x =  stateObj.min + prctg * (stateObj.max - stateObj.min);
		return !!floor ? Math.floor(x) : x;
	}
	genPercentageSetter(stateObj, floor=false){
		return (prctg)=>{this.updatePercentageValue(prctg, stateObj, floor)}
	}
	//----------------------------
	evalRangePercentage(stateObj){
		return (stateObj.val - stateObj.min) / (stateObj.max - stateObj.min);
	}
	evalRangePercentageInt(stageObj){
		return this.evalRangePercentage(stageObj) ;
	}
	//-----------------------------------
	onDataVisualizationReady(plot3DThree){
		this.plot3DThree = plot3DThree;
		
		setTimeout(()=>{
			this.generateRandomDataPoints();
			this.generateAxisLabels();
		}, 100);
	}
	generateRandomDataPoints(){
		let plot3DThree = this.plot3DThree;
		let randomLabelGenerator = (id)=>{
			return 'random data #' + id;
		};
		
		let data = [];
		for(let i=0; i < this.state.dataCount.val; ++i){
			data.push( {points: this.generateRandomPoints(100), label: randomLabelGenerator(i)} );
		}
		
		if(!!plot3DThree){
			plot3DThree.clearData();
			data.forEach(d => plot3DThree.addData( d ) );
		}

		this.setState({data});
	}
	generateAxisLabels(){
		let plot3DThree = this.plot3DThree;
		if(!plot3DThree){
			return;
		}
		let axisLabels = {
			xlabels: [],//'0', '1', '2', '3', '4'],			
			ylabels: ['80.0', '90.0', '100.0', '110.0']
		};
		let curDate = new Date();
		for(let i=0; i < 5; ++i){
			let d = addDaysToDate(i, curDate);
			let dstr = formatDateToStr(d);
			axisLabels.xlabels.push(dstr);
		}
		plot3DThree.setAxisLabels( axisLabels );
	}
	changeCamera(){
		if(!this.plot3DThree){
			return;
		}
		let newState = !this.state.orthographic;
		if(newState){
			this.plot3DThree.setOrthographicCamera();
		}else{
			this.plot3DThree.setPerspectiveCamera();
		}
		this.setState({orthographic: newState});
		
	}
	updatePlotDataCount(){
		if( !this.plot3DThree ){
			return;
		}
		this.generateRandomDataPoints();
	}
	render(){
		let description = `
			Most diagrams that plot time series data leverage only two dimensions. 
			That sometimes makes it more difficult to distinguish each graph
			than it needs to be.
			I programmed a plot that adds the third dimension to it. Most of the time
			it in deed makes it easier zu distinguish the graphs and their values.
			This diagram plots random data. The camera randomly rotates to give an impression
			of the three dimensional rendering. In production code the user can
			control the viewing angle.
			The code uses the Three.js library with WebGL 2 enabled.
		`;
		return (
			<div className="DataVisualizationRSC">
				<div className="HeadingRSC">
					3D time series plot
				</div>
				<div className="DescriptionRSC">
					{description}
				</div>
				<div className="DataVisualizationCanvasDivRSC">
					<Plot3D onLoaded={this.onDataVisualizationReady}
								dataLabelFontSize={this.state.dataLabelFontSize}
								axisLabelFontSize={this.state.axisLabelFontSize}/>
				</div>
				
				<div className="SettingsDivRSC SettingsDivDataVisualizationRSC">
					<div className="CheckBoxDivRSC">
						<div className="CheckBoxLabelRSC">
							{"orthographic camera:"}
						</div>
						<div className="CheckBoxRSC">
							<CheckBox checked={this.state.orthographic}
									 	 onClick={this.changeCamera}
							/>
						</div>
					</div>
					<div className="SliderContainerRSC">
						<div className="SliderDivRSC">
							<SlideBar label="graph count"
										 sliderVal={this.evalRangePercentageInt(this.state.dataCount)}
										 onMouseUp={(value)=>{
										 	let lastVal = Math.floor(this.state.dataCount.val);
										 	let setter  = Math.floor(this.genPercentageSetter(this.state.dataCount));
										 	setter(value);
										 	let newVal = Math.floor(this.state.dataCount.val);
										 	if(lastVal != newVal){
										 		
										 		this.updatePlotDataCount();
										 	}
										 }}/>
						</div>
					</div>
				</div>
			</div>
		);
	}
	
	//----------------------------------
	
	generateRandomPoints(n){
		let pnts = [];
		let rv = this.generateRandomValues(n);
		for(let i=0; i < n; ++i){
			pnts.push( [i, rv[i]] );
		}
		return pnts;
	}
	generateSinePoints(n){
		let pnts = [];
		let rv = this.generateSineValues(n);
		for(let i=0; i < n; ++i){
			pnts.push( [i, rv[i]] );
		}
		return pnts;
	}
	generateSineValues(n){
		let v = [];
		const offs = 0.01;
		for(let i=0; i < n ; ++i){
			let cv = Math.sin(i/n * 2 * Math.PI) + 5;
			v.push( cv );
		}
		return v;
	}
	generateRandomValues(n, min=0, max=8){
		let v = [];
		v.push(2);
		const offs = 0.1;
		for(let i=1; i < n ; ++i){
			let uptick = 1 + offs;
			let ups = Math.random() > 0.5 ? uptick : (1 / uptick);
			let tarVal = Math.max(Math.min(max, v[i-1] * ups), min);
			v.push( tarVal );
		}
		return v;
	}
}

export default DataVisualizationRSC;

	