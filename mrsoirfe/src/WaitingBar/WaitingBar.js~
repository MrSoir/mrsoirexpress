import React, { Component } from 'react';
import * as THREE from 'three';
import './WaitingBar.css';

function toTwoDigitHexString(x){
	let s = x.toString(16);
	if(s.length === 1){
		s = '0' + s;
	}
	return s;
}

class Color extends THREE.Vector3{
	static fromRGB(r=0, g=0, b=0){
		return new Color(r,g,b);
	}
	mixColor(color, progress=0.5){
		let mixed = this.clone().add( color.clone().sub(this).multiplyScalar(progress) );
		
		let mixedCol = new Color(mixed.x, mixed.y, mixed.z);
		return mixedCol;
	}
	toHexString(){
		let rs = toTwoDigitHexString(Math.floor(this.x));
		let gs = toTwoDigitHexString(Math.floor(this.y));
		let bs = toTwoDigitHexString(Math.floor(this.z));
		let colHex =  rs + gs + bs;
		return colHex;
	}
}
class WaitingBar extends Component{
	constructor(props){
		super(props);
		
		this.nextFrame = this.nextFrame.bind(this);
		
		this.canvas = React.createRef();
	}
	goToArduinoHomepage(){
	}

   componentDidMount(){
   	this.ctx = this.canvas.current.getContext('2d');
   	this.ctx.fillStyle = '#00ff00';
		this.ctx.strokeStyle = '#0000ff';
		
		this.initRotation = 0;
		this.rotation = this.initRotation;
		this.rotationSpeed = 0;
		this.curRotationSpeedIncrmnt = 0;
		this.rotationSpeedIncrmnt = 0.01;
		this.maxRotationSpeed = 0.002;
		
		this.minScale = 0.9;
		this.maxScale = 1.0;
		this.scale = this.maxScale;
		this.curScaleIncrmnt = 0;
		
		this.selectedId = 0;
		this.selectedIdProgress = 0;
		
		this.setCanvasSize({
			width: 1000,
			height: 800
		});
   	
		this.nextFrame();
	}
	evalSelectedFillColor(){
		return !!this.props.selectedFillColor ?
				   this.props.selectedFillColor : 
					new Color(0, 255, 0);
	}
	evalSelectedStrokeColor(){
		return !!this.props.strokeColor ? 
				   this.props.strokeColor : 
				   this.evalSelectedFillColor();//new Color(0, 255 ,0);
	}
	evalFillColor(){
		return !!this.props.fillColor ? 
					this.props.fillColor : 
					new Color(150,150,150);
	}
	evalStrokeColor(){
		return !!this.props.strokeColor ? 
			      this.props.strokeColor : 
				   this.evalFillColor();//new Color(0,0,0);
	}
	evalFragmentCount(){
		return !!this.props.fragmentCount ? this.props.fragmentCount   : 10;
	}
	evalFragmentPadding(){
		return !!this.props.fragmentPadding || (this.props.fragmentPadding === 0) ? this.props.fragmentPadding : (Math.PI * 2 / 300);
	}
	evalScaleSpeed(){
		return !!this.props.scaleSpeed ? this.props.scaleSpeed : 0.005;
	}
	evalProgressSpeed(){
		return !!this.props.progressSpeed ? this.props.progressSpeed : 0.03;
	}
	nextFrame(loop=true){
	  	this.drawWaitingBar();
   	this.incrementProgress();
   	if(loop && !this.props.stop){
   		window.requestAnimationFrame(this.nextFrame);
   	}
	}
	incrementProgress(){
		this.selectedIdProgress += this.evalProgressSpeed();
		if(this.selectedIdProgress > 1){
			this.selectedIdProgress = 0;
			this.selectedId = (this.selectedId + 1) % this.evalFragmentCount();
		}
		
		this.rotation = (this.rotation + this.rotationSpeed) % (Math.PI * 2);
/*		this.curRotationSpeedIncrmnt = this.curRotationSpeedIncrmnt + this.rotationSpeedIncrmnt ;
		this.rotationSpeed = Math.sin( this.curRotationSpeedIncrmnt ) * this.maxRotationSpeed;*/
		
		this.curScaleIncrmnt = (this.curScaleIncrmnt + this.evalScaleSpeed()) % 1;
		this.scale = (this.maxScale + this.minScale) * 0.5 + (this.maxScale - this.minScale) * Math.sin(this.curScaleIncrmnt * Math.PI * 2) * 0.5;
	}
	drawWaitingBar(){
		this.clearCanvas();
		this.drawCircleFragments();
	}
	clearCanvas(){
		this.ctx.clearRect(0,0, this.ctx.width, this.ctx.height);
	}
	setCanvasSize(size){
		this.ctx.width = size.width;
		this.ctx.height = size.height;
		this.clearCanvas();
	}
	drawCircleFragments(){
		if(!this.ctx){
			// canvas not set yet
			return;
		}
		this.ctx.fillStyle = '#00ff00';
		this.ctx.strokeStyle = '#0000ff';
		
		let frgmnts = this.evalFragmentCount();
		let padding = this.evalFragmentPadding();
		let angleRange = ((Math.PI * 2) - (padding * frgmnts)) / frgmnts;
		let angle0 = 0;
		let angle1 = 0;
		
		for(let i=0; i < frgmnts; ++i){
			this.setFragmentColor(i);
			angle0 = -Math.PI / 2 + this.evalFragmentPadding() * 0.5 + + i * (angleRange + padding) + this.rotation;
			angle1 = angle0 + angleRange;
			this.drawCirleFragment(angle0 , angle1);
		}
	}
	setFragmentColor(fragmentId){
		if(fragmentId === this.selectedId){
			let progress = !!this.props.fading ? Math.sin(this.selectedIdProgress * Math.PI): 1;
			
			let selProgrCol = this.evalFillColor().mixColor(this.evalSelectedFillColor(), progress);
			this.ctx.fillStyle = '#' + selProgrCol.toHexString();
			
			let selStrkCol = this.evalStrokeColor().mixColor(this.evalSelectedStrokeColor(), progress);
			this.ctx.strokeStyle = '#' + selStrkCol.toHexString();
		}else{
			this.ctx.fillStyle = '#' + this.evalFillColor().toHexString();
			this.ctx.strokeStyle = '#' + this.evalStrokeColor().toHexString();
		}
	}
	drawCirleFragment(angle0, angle1){
		let ctx = this.ctx;
		
		let outerRad = this.props.outerRadius * this.scale;
		let innerRad = this.props.innerRadius * this.scale;
		
		let center = [ctx.width * 0.5, ctx.height * 0.5];
		
		let p0 = [center[0] + Math.cos(angle0) * innerRad, center[1] + Math.sin(angle0) * innerRad];
		let p1 = [center[0] + Math.cos(angle0) * outerRad, center[1] + Math.sin(angle0) * outerRad];
		let p2 = [center[0] + Math.cos(angle1) * outerRad, center[1] + Math.sin(angle1) * outerRad];
		let p3 = [center[0] + Math.cos(angle1) * innerRad, center[1] + Math.sin(angle1) * innerRad];
		
		let avgAngl = (angle0 + angle1) * 0.5;
		let curvedRadFctr = 1.05;
		let c0, c1;
		if(this.props.innerCurved){
			c0 = [center[0] + Math.cos(avgAngl) * innerRad * curvedRadFctr, center[1] + Math.sin(avgAngl) * innerRad * curvedRadFctr];
		}
		if(this.props.outerCurved){
			c1 = [center[0] + Math.cos(avgAngl) * outerRad * curvedRadFctr, center[1] + Math.sin(avgAngl) * outerRad * curvedRadFctr];
		}
		
		ctx.beginPath();
		ctx.moveTo(p0[0], p0[1]);
		ctx.lineTo(p1[0], p1[1]);
		
		if(this.props.outerCurved){
			ctx.quadraticCurveTo(c1[0], c1[1], p2[0], p2[1]);
		}else{
			ctx.lineTo(p2[0], p2[1]);
		}
		ctx.lineTo(p3[0], p3[1]);
		if(this.props.innerCurved){
			ctx.quadraticCurveTo(c0[0], c0[1], p0[0], p0[1]);
		}
		ctx.closePath();
		ctx.fill();
		ctx.stroke();
	}
	render(){
		return (
			<div className="WaitingBar">				
				<canvas className="WaitingBarCanvas"
							 width="1000" height="800"
						  ref={this.canvas}>
				</canvas>
			</div>
		);
	}
}

export {WaitingBar, Color};

